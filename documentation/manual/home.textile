h1. MyBatisPlay - MyBatis 3.0.6

p(note). This module allows you to use MyBatis persistence framework with play.

p(note). Contains a fix for a classloader issue when using default mybatis cache (SerializedCache)

p(note). It will detect changes to the xml configuration files and reinitialize the SqlSessionFactory

h2. Sample application

p(note). Your module should contain a sample app in the @sample@ directory that demonstrates the module. Describe how to run the demo here.

h2. Getting started

To install MyBatisPlay add it as a dependency in your dependencies.yml file:

bc. require:
      -play -> mybatisplay {version}

h2. Configuration

Define these minimum settings in @application.conf@ 

h3. Database settings

bc. 
    db.url=jdbc:mysql://localhost:3306/mydb
    db.driver=com.mysql.jdbc.Driver
    db.user=dbuser
    db.pass=dbpass

h3. MyBatis configuration location

bc. 
    mybatis.configuration=mybatis/configuration.xml
     
You can base your configuration.xml file on this template:

bc. 
    <configuration>
      <environments default="development">
        <environment id="development">
          <transactionManager type="JDBC" />
          <dataSource type="POOLED">
            <property name="driver" value="${driver}"/>
            <property name="url" value="${url}"/>
            <property name="username" value="${user}"/>
            <property name="password" value="${pass}"/>
          </dataSource>
        </environment>
      </environments>
    </configuration>    


See the included sample for a full example or the MyBatis Docs for details.

h2. Usage

p(note). You can get access to a @SqlSessionFactory@ anywhere in your code by simply caling @IbatisSessionFactory.get()@

bc. 
    SqlSession session = IbatisSessionFactory.get().openSession();

